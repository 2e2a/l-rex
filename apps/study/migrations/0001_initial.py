# Generated by Django 2.2.14 on 2020-09-09 11:37

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import markdownx.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(default=0)),
                ('question', models.CharField(help_text='Question text for this item (e.g. "How acceptable is this sentence?").', max_length=1000)),
                ('legend', models.CharField(blank=True, help_text='Legend to clarify the scale (e.g. "1 = bad, 5 = good").', max_length=1000, null=True)),
                ('randomize_scale', models.BooleanField(default=False, help_text='Show scale labels in random order.')),
                ('rating_comment', models.CharField(choices=[('none', 'None'), ('optional', 'Optional'), ('required', 'Required')], default='none', help_text='Let the participant add a comment to the rating (free text).', max_length=10)),
            ],
            options={
                'ordering': ['study', 'number'],
            },
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Give your study a name.', max_length=100)),
                ('slug', models.SlugField(max_length=110, unique=True)),
                ('item_type', models.CharField(choices=[('txt', 'Plain text'), ('mkd', 'Rich text with markdown'), ('aul', 'Audio links')], default='txt', help_text='The items can be plain text or markdown rich text or links to audio files (self-hosted).', max_length=3)),
                ('use_blocks', models.BooleanField(default=False, help_text='Enable if you want to divide the questionnaire into separate parts (blocks) with individual instructions.')),
                ('pseudo_randomize_question_order', models.BooleanField(default=False, help_text='Show questions in random order (if multiple questions are defined).')),
                ('enable_item_rating_feedback', models.BooleanField(default=False, help_text='Allows you to define feedback shown to participants for individual item ratings.')),
                ('password', models.CharField(blank=True, help_text='This password will be required to participate in the study.', max_length=200, null=True)),
                ('participant_id', models.CharField(choices=[('none', 'No participant IDs'), ('enter', 'Participants are asked to enter an ID'), ('random', 'Generate random ID for each participant')], default='none', help_text='Choose the first option for fully anonymous participation. Choose the second option if you want to save an ID that participants receive independently (e.g., from an external participant recruitment platform). Choose the third option to generate a unique identifier (code) for each participant which will be displayed at the end of the questionnaire and which can be used e.g. as proof of participation.', max_length=8, verbose_name='participant ID')),
                ('end_date', models.DateField(blank=True, help_text='Set a participation deadline.', null=True)),
                ('trial_limit', models.IntegerField(blank=True, help_text='If you want to set a maximal number of participants, enter a number.', null=True, verbose_name='Maximal number of participants')),
                ('instructions', markdownx.models.MarkdownxField(blank=True, help_text='These instructions will be presented to the participant before the experiment begins.', max_length=5000, null=True)),
                ('short_instructions', markdownx.models.MarkdownxField(blank=True, help_text='You can optionally provide a shorter version of the instructions that the participant can access at any point during participation as a reminder of the task.', max_length=3000, null=True)),
                ('contact_name', models.CharField(blank=True, help_text='This name will be shown to participants as part of the contact information before the study begins.', max_length=1000, null=True)),
                ('contact_email', models.EmailField(blank=True, help_text='This e-mail address will be shown to participants as part of the contact information before the study begins.', max_length=254, null=True)),
                ('contact_affiliation', models.CharField(blank=True, help_text='This affiliation (e.g., university or research institute) will be shown to participants as part of the contact information before the study begins.', max_length=1000, null=True)),
                ('contact_details', markdownx.models.MarkdownxField(blank=True, help_text='You can optionally provide additional information about you and/or the research project (e.g., "This study is part of the research project XY, for more information, see ..."). This information will be shown to participants before the study begins.', max_length=5000, null=True)),
                ('consent_form_text', markdownx.models.MarkdownxField(blank=True, help_text='This text informs participants about the procedure and purpose of the study. It will be shown to the participants before the study begins. It should include a privacy statement: whether any personal data is collected and how it will be processed and stored.', max_length=5000, null=True)),
                ('consent_statement', models.CharField(default='I have read and understood the above information. I agree to participate in this study.', help_text='Participants will have to check a box with this statement before study begins.', max_length=500)),
                ('intro', markdownx.models.MarkdownxField(blank=True, help_text='This text will be presented to the participants on the first page.', max_length=5000, null=True)),
                ('outro', markdownx.models.MarkdownxField(blank=True, help_text='This text will be presented to the participants on the last page.', max_length=5000, null=True)),
                ('continue_label', models.CharField(default='Continue', help_text='Label of the "Continue" button used during participation.', max_length=40)),
                ('save_consent_form_label', models.CharField(default='Save this page', help_text='Label of the button used to save/print the consent form.', max_length=40)),
                ('consent_form_label', models.CharField(default='Consent form', help_text='Label for "Consent form" used during participation.', max_length=40)),
                ('contact_label', models.CharField(default='Contact', help_text='Label for "Contact" used during participation.', max_length=40)),
                ('instructions_label', models.CharField(default='Show/hide short instructions', help_text='Label of the link to the short instructions that the participant can access during participation (if defined).', max_length=60)),
                ('block_instructions_label', models.CharField(default='Show/hide short instructions for this block', help_text='Label of the link to the short block instructions that the participant can access during  participation (if defined).', max_length=60)),
                ('optional_label', models.CharField(default='optional', help_text='Label used for user input fields that can be optional, e.g. comment.', max_length=40)),
                ('comment_label', models.CharField(default='Comment', help_text='Label used for the comment field.', max_length=40)),
                ('participation_id_label', models.CharField(default='Participation ID', help_text='Label used for the participant ID form on the instruction page or for the participation code on the outro page, depending on the "participant ID" setting.', max_length=40, verbose_name='Participation ID label')),
                ('password_label', models.CharField(default='Password', help_text='Label used for the participant password form on the instruction page.', max_length=40)),
                ('answer_question_message', models.CharField(default='Please answer this question.', help_text='Error message shown to participant if the question was not answered.', max_length=500)),
                ('answer_questions_message', models.CharField(default='Please answer all questions.', help_text='Error message shown to participant if a question was not answered.', max_length=500)),
                ('feedback_message', models.CharField(default='Please note the following feedback.', help_text='Message indicating that feedback is shown for some ratings.', max_length=500)),
                ('is_published', models.BooleanField(default=False, help_text='Enable to publish your study. It will then be available for participation.')),
                ('is_finished', models.BooleanField(default=False, help_text='Enable to finish study participation.')),
                ('created_date', models.DateField(default=django.utils.timezone.now, editable=False)),
                ('is_archived', models.BooleanField(default=False)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('shared_with', models.ManyToManyField(blank=True, help_text='Give other users access to the study.', related_name='shared_studies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_date', 'title'],
            },
        ),
        migrations.CreateModel(
            name='ScaleValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(default=0)),
                ('label', models.CharField(help_text='Provide a label for this point of the scale.', max_length=50)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scale_values', to='lrex_study.Question')),
            ],
            options={
                'ordering': ['question', 'number'],
            },
        ),
        migrations.AddField(
            model_name='question',
            name='study',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='lrex_study.Study'),
        ),
        migrations.CreateModel(
            name='DemographicField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='You can enter a demographic question (e.g., "age" or "native languages"). The participants will have to answer it (free text input) at the beginning of the study.', max_length=500, verbose_name='question')),
                ('study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='demographics', to='lrex_study.Study')),
            ],
            options={
                'ordering': ['study', 'pk'],
            },
        ),
    ]
